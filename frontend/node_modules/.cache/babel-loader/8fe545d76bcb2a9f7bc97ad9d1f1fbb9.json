{"ast":null,"code":"import _isNil from \"lodash/isNil\";\nimport _assign from \"lodash/assign\";\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nimport { Helpers, LabelHelpers, Data, Domain, Scale } from \"victory-core\";\nimport { getBarPosition } from \"victory-bar\";\nimport isEqual from \"react-fast-compare\";\nimport * as d3Array from \"d3-array\";\nimport * as d3Scale from \"d3-scale\";\n\nvar cacheLastValue = function (func) {\n  var called = false;\n  var lastArgs;\n  var lastReturnVal;\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (called && isEqual(lastArgs, args)) {\n      return lastReturnVal;\n    }\n\n    var value = func.apply(void 0, args);\n    called = true;\n    lastReturnVal = value;\n    lastArgs = args;\n    return value;\n  };\n};\n\nvar dataOrBinsContainDates = function (_ref) {\n  var data = _ref.data,\n      bins = _ref.bins,\n      x = _ref.x;\n  var xAccessor = Helpers.createAccessor(x || \"x\");\n  var dataIsDates = data.some(function (datum) {\n    return xAccessor(datum) instanceof Date;\n  });\n  var binsHasDates = Array.isArray(bins) && bins.some(function (bin) {\n    return bin instanceof Date;\n  });\n  return dataIsDates || binsHasDates;\n};\n\nvar getBinningFunc = function (_ref2) {\n  var data = _ref2.data,\n      x = _ref2.x,\n      bins = _ref2.bins,\n      dataOrBinsContainsDates = _ref2.dataOrBinsContainsDates;\n  var xAccessor = Helpers.createAccessor(x || \"x\");\n  var bin = d3Array.bin().value(xAccessor);\n  var niceScale = (dataOrBinsContainsDates ? d3Scale.scaleTime() : d3Scale.scaleLinear()).domain(d3Array.extent(data, xAccessor)).nice();\n\n  if (Array.isArray(bins)) {\n    bin.domain([bins[0], bins[bins.length - 1]]);\n    bin.thresholds(bins);\n    return bin;\n  }\n\n  if (Number.isInteger(bins)) {\n    bin.domain(niceScale.domain());\n    bin.thresholds(bins);\n    return bin;\n  }\n\n  if (dataOrBinsContainsDates) {\n    bin.domain(niceScale.domain());\n    bin.thresholds(niceScale.ticks());\n    return bin;\n  }\n\n  bin.domain(niceScale.domain());\n  return bin;\n};\n\nexport var getFormattedData = cacheLastValue(function (_ref3) {\n  var _ref3$data = _ref3.data,\n      data = _ref3$data === void 0 ? [] : _ref3$data,\n      x = _ref3.x,\n      bins = _ref3.bins;\n\n  if ((!data || !data.length) && !Array.isArray(bins)) {\n    return [];\n  }\n\n  var dataOrBinsContainsDates = dataOrBinsContainDates({\n    data: data,\n    bins: bins,\n    x: x\n  });\n  var binFunc = getBinningFunc({\n    data: data,\n    x: x,\n    bins: bins,\n    dataOrBinsContainsDates: dataOrBinsContainsDates\n  });\n  var foo = binFunc(data);\n  var binnedData = foo.filter(function (_ref4) {\n    var x0 = _ref4.x0,\n        x1 = _ref4.x1;\n\n    if (dataOrBinsContainsDates) {\n      return new Date(x0).getTime() !== new Date(x1).getTime();\n    }\n\n    return x0 !== x1;\n  });\n  var formattedData = binnedData.map(function (bin) {\n    var x0 = dataOrBinsContainsDates ? new Date(bin.x0) : bin.x0;\n    var x1 = dataOrBinsContainsDates ? new Date(bin.x1) : bin.x1;\n    return {\n      x0: x0,\n      x1: x1,\n      x: dataOrBinsContainsDates ? new Date((x0.getTime() + x1.getTime()) / 2) : (x0 + x1) / 2,\n      y: bin.length,\n      binnedData: _toConsumableArray(bin)\n    };\n  });\n  return formattedData;\n});\n\nvar getData = function (props) {\n  var bins = props.bins,\n      data = props.data,\n      x = props.x;\n  var dataIsPreformatted = data.some(function (_ref5) {\n    var _y = _ref5._y;\n    return !_isNil(_y);\n  });\n  var formattedData = dataIsPreformatted ? data : getFormattedData({\n    data: data,\n    x: x,\n    bins: bins\n  });\n  return Data.getData(_objectSpread({}, props, {\n    data: formattedData,\n    x: \"x\"\n  }));\n};\n\nvar getDomain = function (props, axis) {\n  var data = getData(props);\n\n  if (!data.length) {\n    return [0, 1];\n  }\n\n  if (axis === \"x\") {\n    var firstBin = data[0];\n    var lastBin = data[data.length - 1];\n    return Domain.getDomainWithZero(_objectSpread({}, props, {\n      data: [{\n        x: firstBin.x0\n      }, {\n        x: lastBin.x1\n      }],\n      x: \"x\"\n    }), \"x\");\n  }\n\n  return props.data.length ? Domain.getDomainWithZero(_objectSpread({}, props, {\n    data: data\n  }), \"y\") : [0, 1];\n};\n\nvar getCalculatedValues = function (props) {\n  var defaultStyles = Helpers.getDefaultStyles(props, \"histogram\");\n  var style = Helpers.getStyles(props.style, defaultStyles);\n  var data = getData(props);\n  var range = props.range || {\n    x: Helpers.getRange(props, \"x\"),\n    y: Helpers.getRange(props, \"y\")\n  };\n  var domain = {\n    x: getDomain(props, \"x\"),\n    y: getDomain(props, \"y\")\n  };\n  var scale = {\n    x: Scale.getBaseScale(props, \"x\").domain(domain.x).range(props.horizontal ? range.y : range.x),\n    y: Scale.getBaseScale(props, \"y\").domain(domain.y).range(props.horizontal ? range.x : range.y)\n  };\n  return {\n    style: style,\n    data: data,\n    scale: scale,\n    domain: domain\n  };\n};\n\nvar getBaseProps = function (props, fallbackProps) {\n  var modifiedProps = Helpers.modifyProps(props, fallbackProps, \"histogram\");\n  props = _assign({}, modifiedProps, getCalculatedValues(modifiedProps));\n  var _props = props,\n      binSpacing = _props.binSpacing,\n      cornerRadius = _props.cornerRadius,\n      data = _props.data,\n      domain = _props.domain,\n      events = _props.events,\n      height = _props.height,\n      horizontal = _props.horizontal,\n      padding = _props.padding,\n      scale = _props.scale,\n      sharedEvents = _props.sharedEvents,\n      standalone = _props.standalone,\n      style = _props.style,\n      theme = _props.theme,\n      width = _props.width,\n      labels = _props.labels,\n      name = _props.name,\n      getPath = _props.getPath;\n  var initialChildProps = {\n    parent: {\n      horizontal: horizontal,\n      domain: domain,\n      scale: scale,\n      width: width,\n      height: height,\n      data: data,\n      standalone: standalone,\n      name: name,\n      theme: theme,\n      padding: padding,\n      style: style.parent\n    }\n  };\n\n  var getDistance = function (datum) {\n    var current = scale.x(datum.x0);\n    var next = scale.x(datum.x1);\n    return Math.abs(next - current);\n  };\n\n  var getBarWidth = function (datum) {\n    if (binSpacing) {\n      return getDistance(datum) - binSpacing;\n    }\n\n    return getDistance(datum);\n  };\n\n  return data.reduce(function (childProps, datum, index) {\n    var eventKey = !_isNil(datum.eventKey) ? datum.eventKey : index;\n\n    var _getBarPosition = getBarPosition(props, datum),\n        x = _getBarPosition.x,\n        y = _getBarPosition.y,\n        y0 = _getBarPosition.y0,\n        x0 = _getBarPosition.x0;\n\n    var barWidth = getBarWidth(datum);\n    var dataProps = {\n      alignment: \"middle\",\n      barWidth: barWidth,\n      cornerRadius: cornerRadius,\n      data: data,\n      datum: datum,\n      horizontal: horizontal,\n      index: index,\n      scale: scale,\n      style: style.data,\n      width: width,\n      height: height,\n      x: x,\n      y: y,\n      y0: y0,\n      x0: x0,\n      getPath: getPath\n    };\n    childProps[eventKey] = {\n      data: dataProps\n    };\n    var text = LabelHelpers.getText(props, datum, index);\n\n    if (text !== undefined && text !== null || labels && (events || sharedEvents)) {\n      childProps[eventKey].labels = LabelHelpers.getProps(props, index);\n    }\n\n    return childProps;\n  }, initialChildProps);\n};\n\nexport { getData, getDomain, getBaseProps };","map":null,"metadata":{},"sourceType":"module"}