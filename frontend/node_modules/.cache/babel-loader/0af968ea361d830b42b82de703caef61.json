{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n/** @jsx jsx */\n\n\nimport { jsx } from \"@emotion/core\";\nimport { cloneElement, forwardRef } from \"react\";\nimport Box from \"../Box\";\nimport { cleanChildren } from \"../utils\";\nvar ButtonGroup = forwardRef(function (props, ref) {\n  var size = props.size,\n      variantColor = props.variantColor,\n      variant = props.variant,\n      isAttached = props.isAttached,\n      _props$spacing = props.spacing,\n      spacing = _props$spacing === void 0 ? 2 : _props$spacing,\n      children = props.children,\n      rest = _objectWithoutPropertiesLoose(props, [\"size\", \"variantColor\", \"variant\", \"isAttached\", \"spacing\", \"children\"]);\n\n  var validChildren = cleanChildren(children);\n  var clones = validChildren.map(function (child, index) {\n    var isFirst = index === 0;\n    var isLast = index === validChildren.length - 1;\n    return cloneElement(child, _objectSpread({\n      size: size || child.props.size,\n      variantColor: child.props.variantColor || variantColor,\n      variant: child.props.variant || variant,\n      _focus: {\n        boxShadow: \"outline\",\n        zIndex: 1\n      }\n    }, !isLast && !isAttached && {\n      mr: spacing\n    }, {}, isFirst && isAttached && {\n      roundedRight: 0\n    }, {}, isLast && isAttached && {\n      roundedLeft: 0\n    }, {}, !isLast && isAttached && {\n      borderRight: 0\n    }, {}, !isFirst && !isLast && isAttached && {\n      rounded: 0\n    }));\n  });\n  return jsx(Box, _extends({\n    ref: ref,\n    display: \"inline-block\"\n  }, rest), clones);\n});\nexport default ButtonGroup;","map":null,"metadata":{},"sourceType":"module"}