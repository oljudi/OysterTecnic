{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  animation: \", \" \", \"s;\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteralLoose([\"\\nfrom { opacity: 0; }\\nto   { opacity: 1; }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  border-color: \", \" !important;\\n  box-shadow: none !important;\\n  opacity: 0.7;\\n  // do not !important this for Firefox support\\n  background: \", \";\\n\\n  // Prevent background color from extending to the border and overlappping\\n  background-clip: padding-box !important;\\n  cursor: default;\\n\\n  // Transparent text will occupy space but be invisible to the user\\n  color: transparent !important;\\n  animation: \", \"s linear infinite alternate\\n    \", \";\\n  pointer-events: none;\\n  user-select: none;\\n\\n  // Make pseudo-elements (CSS icons) and children invisible\\n  &::before,\\n  &::after,\\n  * {\\n    visibility: hidden !important;\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"\\nfrom {\\n  border-color: \", \";\\n  background: \", \";\\n}\\n\\nto {\\n  border-color: \", \";\\n  background: \", \";\\n}\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n/** @jsx jsx */\n\n\nimport { Fragment, useMemo } from \"react\";\nimport { useTheme } from \"../ThemeProvider\";\nimport { useColorMode } from \"../ColorModeProvider\";\nimport { css, jsx, keyframes } from \"@emotion/core\";\nimport Box from \"../Box\";\n\nvar skeletonGlow = function skeletonGlow(colorStart, colorEnd) {\n  return keyframes(_templateObject(), colorStart, colorStart, colorEnd, colorEnd);\n};\n\nvar getStyle = function getStyle(_ref) {\n  var colorStart = _ref.colorStart,\n      colorEnd = _ref.colorEnd,\n      speed = _ref.speed;\n  return css(_templateObject2(), colorStart, colorStart, speed, skeletonGlow(colorStart, colorEnd));\n};\n\nvar fadeIn = keyframes(_templateObject3());\n\nvar fadeInCss = function fadeInCss(duration) {\n  return css(_templateObject4(), fadeIn, duration);\n};\n\nvar Skeleton = function Skeleton(props) {\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var defaultStart = {\n    light: colors.gray[100],\n    dark: colors.gray[800]\n  };\n  var defaultEnd = {\n    light: colors.gray[400],\n    dark: colors.gray[600]\n  };\n\n  var _props$colorStart = props.colorStart,\n      colorStart = _props$colorStart === void 0 ? defaultStart[colorMode] : _props$colorStart,\n      _props$colorEnd = props.colorEnd,\n      colorEnd = _props$colorEnd === void 0 ? defaultEnd[colorMode] : _props$colorEnd,\n      _props$isLoaded = props.isLoaded,\n      isLoaded = _props$isLoaded === void 0 ? false : _props$isLoaded,\n      _props$fadeInDuration = props.fadeInDuration,\n      fadeInDuration = _props$fadeInDuration === void 0 ? 0.4 : _props$fadeInDuration,\n      _props$speed = props.speed,\n      speed = _props$speed === void 0 ? 0.8 : _props$speed,\n      rest = _objectWithoutPropertiesLoose(props, [\"colorStart\", \"colorEnd\", \"isLoaded\", \"fadeInDuration\", \"speed\"]);\n\n  var fadeInStyle = useMemo(function () {\n    return fadeInCss(fadeInDuration);\n  }, [fadeInDuration]);\n  var skeletonStyle = useMemo(function () {\n    return getStyle({\n      colorStart: colorStart,\n      colorEnd: colorEnd,\n      speed: speed\n    });\n  }, [colorStart, colorEnd, speed]);\n\n  if (isLoaded) {\n    return jsx(Box, _extends({\n      css: fadeInStyle\n    }, rest));\n  }\n\n  return jsx(Box, _extends({\n    css: skeletonStyle,\n    borderRadius: \"2px\"\n  }, rest));\n};\n\nexport default Skeleton;","map":null,"metadata":{},"sourceType":"module"}